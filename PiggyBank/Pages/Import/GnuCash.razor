@page "/import/gnucash"
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using PiggyBank.Data.Models
@implements IDisposable
@inject ILogger<GnuCash> logger
@inject ImportService ImportService
@inject NotificationService MessageService

<h1>Import from GnuCash</h1>
<p>
    @if (_importing)
    {
        @:Importing from GnuCash...
    }
    else
    {
        <button @onclick="Import">Import data from GnuCash</button>
    }
</p>

<ul>
    @if (_commodityCount > 0)
    {
        <li>Commodities ( @_commodityProcessed / @_commodityCount )</li>
    }
    else
    {
        <li>Commodities (pending)</li>
    }

    @if (_accountCount > 0)
    {
        <li>Accounts ( @_accountProcessed / @_accountCount )</li>
    }
    else
    {
        <li>Accounts (pending)</li>
    }

    @if (_transactionCount > 0)
    {
        <li>Transactions ( @_transactionProcessed / @_transactionCount )</li>
    }
    else
    {
        <li>Transactions (pending)</li>
    }

    @if (_complete)
    {
        <li>Finished!</li>
    }
</ul>

@code {
    private CancellationToken _importCancellationToken;
    private CancellationTokenSource? _importCancellationTokenSource;
    private bool _complete;
    private bool _importing;
    private int _commodityCount;
    private int _commodityProcessed;
    private Task? _commodityImportTask;
    private int _accountCount;
    private int _accountProcessed;
    private Task? _accountImportTask;
    private int _transactionCount;
    private int _transactionProcessed;
    private Task? _transactionImportTask;

    protected async Task Import()
    {
        if (_importing) return;

        _importing = true;

        _complete = false;
        _commodityCount = 0;
        _commodityProcessed = 0;
        _accountCount = 0;
        _accountProcessed = 0;
        _transactionCount = 0;
        _transactionProcessed = 0;

        _importCancellationTokenSource = new CancellationTokenSource();
        _importCancellationToken = _importCancellationTokenSource.Token;

        var count = new Progress<int>(value => { _commodityCount = value; StateHasChanged(); });
        var processed = new Progress<int>(value => { _commodityProcessed = value; StateHasChanged(); });
        _commodityImportTask = ImportService.ImportCommodities(processed, count, _importCancellationToken);
        await _commodityImportTask;

        count = new Progress<int>(value => { _accountCount = value; StateHasChanged(); });
        processed = new Progress<int>(value => { _accountProcessed = value; StateHasChanged(); });
        _accountImportTask = ImportService.ImportAccounts(processed, count, _importCancellationToken);
        await _accountImportTask;

        count = new Progress<int>(value => { _transactionCount = value; StateHasChanged(); });
        processed = new Progress<int>(value => { _transactionProcessed = value; StateHasChanged(); });
        _transactionImportTask = ImportService.ImportTransactions(processed, count, _importCancellationToken);
        await _transactionImportTask;

        _importing = false;
        _complete = true;
    }

    public void Dispose()
    {
        if (_importCancellationTokenSource is object && _importing)
        {
            logger.LogInformation("Cancelling GnuCash imports");
            _importCancellationTokenSource.Cancel();
            MessageService.Notify("GnuCash imports cancelled");
        }
    }
}
