@page "/report/income-expense"
@using PiggyBank.Shared.TreeTable;
@inject AccountService AccountService

<h1>Income &amp; Expense Report</h1>

if (_accounts is object && _balances is object)
{
    <div class="income-expense">
        <p>For the period @_startDate to @_endDate</p>
        <h2>Income</h2>
        <TreeTable Model="@CreateTreeTableModel(Account.AccountType.Income)" />

        <h2 class="pt">Expense</h2>
        <TreeTable Model="@CreateTreeTableModel(Account.AccountType.Expense)" />
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private DateOnly _startDate = DateOnly.MinValue;
    private DateOnly _endDate = DateOnly.MaxValue;
    private ICollection<Account>? _accounts;
    private Balances? _balances;


    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccountsIncludeSplitsAsync();
        var endDate = DateTime.Now;
        _endDate = DateOnly.FromDateTime(endDate);
        _startDate = new DateOnly(_endDate.Year, 1, 1);
        _balances = new Balances(_accounts, _startDate, _endDate);
    }

    protected string AccountName(object data)
    {
        return ((Account)data).Name;
    }

    protected TreeTableModel CreateTreeTableModel(Account.AccountType accountType)
    {
        var columns = new List<string> { "YTD", "YTD2" };
        TreeTableModel model = new TreeTableModel("Account", columns);

        if (_accounts is not object) return model;

        var rootAccount = GetRootAccount(accountType);
        if (rootAccount is object)
        {
            AddAccountsToModel(rootAccount, model);
        }

        return model;
    }

    protected void AddAccountsToModel(Account account, TreeTableModel model, TreeTableNodeModel? parent = null)
    {
        var balance = account.Commodity.DisplayAmount(_balances![account.Id]);
        var balances = new List<string> { balance, balance };
        var node = model.CreateNode(account.Name, balances, parent);

        foreach (var childAccount in account.Children.OrderBy(a => a.Name))
        {
            AddAccountsToModel(childAccount, model, node);
        }
    }

    private Account? GetRootAccount(Account.AccountType accountType)
    {
        if (_accounts is not object) return null;

        return _accounts.SingleOrDefault(a => a.Parent == null && a.Type == accountType);
    }
}
