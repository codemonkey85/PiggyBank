@page "/accounts"
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using PiggyBank.Data.Models
@using PiggyBank.Shared.TreeView;
@inject AccountService AccountService
@inject ImportService ImportService

<h1>Accounts</h1>

<p>
    @if (_importing)
    {
        @:Importing accounts from GnuCash (@_recordsProcessed / @_recordCount)
    }
    else
    {
        <button @onclick="Import">Import from GnuCash</button>
    }
</p>

@if (_importing)
{
    <p>Table will update after import completes.</p>
}
else if (_accounts is object)
{
    <PiggyBank.Shared.TreeView.TreeView Model="@AccountsToTreeViewModel(RootAccounts)" />
}
else
{
    <p>Loading...</p>
}

@code {
    private bool _importing;
    private int _recordCount = 0;
    private int _recordsProcessed = 0;
    private ICollection<Account>? _accounts;

    protected ICollection<Account> RootAccounts
    {
        get
        {
            if (_accounts is object)
            {
                return _accounts.Where(a => a.Parent == null).ToList();
            }

            return new List<Account>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _accounts = await AccountService.GetAccountsAsync();
    }

    protected string AccountName(object data)
    {
        return ((Account)data).Name;
    }

    protected async Task Import()
    {
        _importing = true;

        var count = new Progress<int>(value => { _recordCount = value; base.StateHasChanged(); });
        var processed = new Progress<int>(value => { _recordsProcessed = value; base.StateHasChanged(); });
        await ImportService.ImportAccounts(processed, count, new CancellationToken());

        _accounts = await AccountService.GetAccountsAsync();
        _importing = false;
    }

    protected ICollection<TreeViewModel> AccountsToTreeViewModel(ICollection<Account> accounts)
    {
        var model = new List<TreeViewModel>();
        foreach (var account in accounts.OrderBy(a => a.Name))
        {
            var tvm = new TreeViewModel(new MarkupString(account.Name));
            if (account.Children.Count > 0)
            {
                tvm.Children = AccountsToTreeViewModel(account.Children);
            }
            model.Add(tvm);
        }

        return model;
    }
}
