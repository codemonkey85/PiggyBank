@attribute [Route(PageRoute.BudgetAmountCalculate)]
@inject BudgetService BudgetService
@inject NavigationManager NavigationManager

@if (!_found)
{
    <Notifications_NotFound Message="@_notFoundMessage" />
}
else if (_budget is object)
{
    <h1>Add Amounts to Budget "@_budget.Name"</h1>

    <details class="pt1">
        <summary>
            <h2 class="ib">About Adding Amounts (click for more...)</h2>
        </summary>
        <p>
            Use the form on this page to automatically add budget amounts to the budget "@(_budget.Name)".
        </p>
        <p>
            If you select a default period of "monthly" there will be an amount budgeted for each month in the
            budget range of @(_budget.StartDate) to @(_budget.EndDate). Selecting "annual" will result in only
            one budget for the entire year.
        </p>
        <p>
            "Use Data From" controls what past periods to use when calculating budget amounts. PiggyBank computes
            the average monthly or annual amount by adding the total of all transactions in that range and dividing
            by the number of periods.
        </p>
        <p>
            You must select at least one account type to create budget amounts for. Most users will want to use at
            least the Expense account type to track spending, but it is also possible to include Income, Assets, and
            Liabilities.
        </p>
    </details>

    <EditForm EditContext="_editContext" OnValidSubmit="SaveBudget" style="position:absolute;">
        <DataAnnotationsValidator />
        <ValidationSummary role="alert" aria-label="budget form errors" />

        <fieldset>
            <legend>Default Period Type</legend>
            <InputRadioGroup @bind-Value="_model.DefaultPeriod">
                <label class="form-control">
                    <InputRadio Value="DateHelper.PeriodType.Monthly" />
                    Monthly
                </label>
                <label class="form-control">
                    <InputRadio Value="DateHelper.PeriodType.Annual" />
                    Annual
                </label>
            </InputRadioGroup>
        </fieldset>
        <fieldset>
            <legend>Use Data From</legend>
            <div class="field">
                <label for="amount-start-date">Start Date</label>
                <InputDate id="amount-start-date" @bind-Value="_model.StartDate" />
            </div>
            <div class="field">
                <label for="amount-end-date">End Date</label>
                <InputDate id="amount-end-date" @bind-Value="_model.EndDate" />
            </div>
        </fieldset>
        <fieldset>
            <legend>Account Types to Include</legend>
            <label>
                <InputCheckbox @bind-Value="_model.IncludeAsset" />
                Asset
            </label>
            <label>
                <InputCheckbox @bind-Value="_model.IncludeExpense" />
                Expense
            </label>
            <label>
                <InputCheckbox @bind-Value="_model.IncludeIncome" />
                Income
            </label>
            <label>
                <InputCheckbox @bind-Value="_model.IncludeLiability" />
                Liability
            </label>
        </fieldset>

        <div class="buttons">
            <button class="primary" type="submit">Add Amounts</button>
            <button class="light" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public string budgetId { get; set; } = null!;

    private bool _found = true;
    private string _notFoundMessage = "Budget not found";

    private Budget? _budget;
    private FormModel _model = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;

    private bool _addingAmounts = false;

    protected override async Task OnParametersSetAsync()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        _model.StartDate = new DateOnly(today.Year - 1, 1, 1);
        _model.EndDate = new DateOnly(today.Year, 12, 31);

        var budgetGuid = Guid.Empty;
        if (string.IsNullOrWhiteSpace(budgetId) || !Guid.TryParse(budgetId, out budgetGuid))
        {
            _notFoundMessage = $"Invalid budget ID: {budgetId}";
            _found = false;
            return;
        }

        _budget = await BudgetService.GetBudgetAsync(budgetGuid);
        if (_budget is not object)
        {
            _notFoundMessage = $"Budget ID '{budgetGuid}' not found";
            _found = false;
            return;
        }

        _editContext = new EditContext(_model);
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext!.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        if (_budget is not object) return;
        if (_validationMessageStore is not object) return;

        _validationMessageStore.Clear();

        if (_model.StartDate.Day != 1)
        {
            _validationMessageStore.Add(() => _model.StartDate, "Start date must be the first day of the month");
        }

        var endMonthDays = DateTime.DaysInMonth(_model.EndDate.Year, _model.EndDate.Month);
        if (_model.EndDate.Day != endMonthDays)
        {
            _validationMessageStore.Add(() => _model.EndDate, "End date must be on the last day of the month");
        }
    }

    private async Task SaveBudget()
    {
        if (_budget is not object) return;

        if (_budget is not object) return;
        if (_addingAmounts) return;
        _addingAmounts = true;

        var config = GetAmountConfig();
        await BudgetService.CalculateAmounts(_budget, config);

        await BudgetService.Save(_budget);
        _addingAmounts = false;

        Cancel();
    }

    private void Cancel()
    {
        if (_budget is not object) return;
        NavigationManager.NavigateTo(PageRoute.BudgetEditFor(_budget.Id));
    }

    private BudgetAmount.Configuration GetAmountConfig()
    {
        var config = new BudgetAmount.Configuration
            {
                DefaultPeriod = _model.DefaultPeriod,
                StartDate = _model.StartDate,
                EndDate = _model.EndDate
            };

        if (_model.IncludeAsset)
        {
            config.AccountTypes.Add(Account.AccountType.Asset);
        }

        if (_model.IncludeExpense)
        {
            config.AccountTypes.Add(Account.AccountType.Expense);
        }

        if (_model.IncludeIncome)
        {
            config.AccountTypes.Add(Account.AccountType.Income);
        }

        if (_model.IncludeLiability)
        {
            config.AccountTypes.Add(Account.AccountType.Liability);
        }

        return config;
    }

    private class FormModel
    {
        public DateHelper.PeriodType DefaultPeriod { get; set; } = DateHelper.PeriodType.Monthly;

        public DateOnly StartDate { get; set; } = DateOnly.MinValue;
        public DateOnly EndDate { get; set; } = DateOnly.MaxValue;

        public bool IncludeAsset { get; set; } = false;
        public bool IncludeExpense { get; set; } = true;
        public bool IncludeIncome { get; set; } = true;
        public bool IncludeLiability { get; set; } = false;

        [Required]
        [Range(typeof(bool), "true", "true", ErrorMessage = "At least one account type is required.")]
        public bool AccountSelected
        {
            get
            {
                return IncludeAsset || IncludeExpense || IncludeIncome || IncludeLiability;
            }
        }
    }
}
