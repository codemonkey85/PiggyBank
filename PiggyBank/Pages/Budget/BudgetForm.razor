@attribute [Route(PageRoute.BudgetAdd)]
@attribute [Route(PageRoute.BudgetEdit)]

@if (!_found)
{
    <Notifications_NotFound Message="@_notFoundMessage" />
}
else if (_budget is not null)
{
    <h1>@Action Budget</h1>

    <EditForm EditContext="_editContext" OnValidSubmit="SaveBudget">
        <DataAnnotationsValidator />
        <ValidationSummary role="alert" aria-label="budget form errors" />

        <div class="field">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="_budget.Name" required aria-required="true" />
            <ValidationMessage For="() => _budget.Name" />
        </div>
        <div class="field">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="_budget.Description" required aria-required="true" />
            <ValidationMessage For="() => _budget.Description" />
        </div>
        <div class="field">
            <label for="start-date">Start Date</label>
            <InputDate id="start-date" @bind-Value="_budget.StartDate" />
            <ValidationMessage For="() => _budget.StartDate" />
        </div>
        <div class="field">
            <label for="end-date">End Date</label>
            <InputDate id="end-date" @bind-Value="_budget.EndDate" />
            <ValidationMessage For="() => _budget.EndDate" />
        </div>
        <div class="field checkbox">
            <InputCheckbox id="is-hidden" @bind-Value="_budget.IsHidden" />
            <label for="is-hidden">Is Hidden?</label>
        </div>
        <div class="buttons">
            @if (_budgetAmountCount == 0)
            {
                <button class="primary pr1" @onclick="SaveAndCalculateAmounts">Save, then Calculate Buget Amounts</button>
            }
            <button class="primary" type="submit">Save</button>
            <button class="light" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>

    if (_budgetAmountCount == 0)
    {
        <p><a href="@PageRoute.BudgetAmountCalculateFor(_budget.Id)">Calculate Budget Amounts</a></p>
    }
    else
    {
        <p><a href="@PageRoute.BudgetAmountIndexFor(_budget.Id)">Manage @_budgetAmountCount Budget Amounts</a></p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public Guid budgetId { get; set; }

    private bool _found = true;
    private string _notFoundMessage = "";
    private Budget? _budget;
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;
    private int _budgetAmountCount = 0;

    protected override async Task OnParametersSetAsync()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);

        if (budgetId == Guid.Empty)
        {
            var nextYear = today.Year + 1;
            _budget = new Budget()
                {
                    Id = Guid.Empty,
                    StartDate = new DateOnly(nextYear, 1, 1),
                    EndDate = new DateOnly(nextYear, 12, 31),
                };
        }
        else
        {
            _budget = await BudgetService.GetBudgetAsync(budgetId);
        }

        if (_budget is null)
        {
            _notFoundMessage = $"Budget with ID '{budgetId}' was not found";
            _found = false;
            return;
        }

        _budgetAmountCount = await BudgetService.GetBudgetAmountCountAsync(budgetId);

        _editContext = new EditContext(_budget);
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext!.OnValidationRequested += HandleValidationRequested;
    }

    private string Action
    {
        get
        {
            return budgetId == Guid.Empty ? "Add" : "Edit";
        }
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        if (_budget is null) return;
        if (_validationMessageStore is null) return;

        _validationMessageStore.Clear();

        if (_budget.StartDate.Day != 1)
        {
            _validationMessageStore.Add(() => _budget.StartDate, "Budget should start on the first day of the month");
        }

        var endMonthDays = DateTime.DaysInMonth(_budget.EndDate.Year, _budget.EndDate.Month);
        if (_budget.EndDate.Day != endMonthDays)
        {
            _validationMessageStore.Add(() => _budget.EndDate, "Budget should end on the last day of the month");
        }
    }

    private async Task SaveAndCalculateAmounts()
    {
        if (_budget is null) return;
        await BudgetService.Save(_budget);
        NavigationManager.NavigateTo(PageRoute.BudgetAmountCalculateFor(_budget.Id));
    }

    private async Task SaveBudget()
    {
        if (_budget is null) return;
        await BudgetService.Save(_budget);
        Cancel();
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo(PageRoute.BudgetIndex);
    }
}
