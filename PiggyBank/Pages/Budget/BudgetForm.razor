@page "/budget/add"
@page "/budget/edit/{budgetId:guid}"
@inject BudgetService BudgetService
@inject NavigationManager NavigationManager

<h1>@Action Budget</h1>

@if (_budget is object)
{
    <EditForm Model="@_budget" OnValidSubmit="SaveBudget">
        <DataAnnotationsValidator />
        <div class="field">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="_budget.Name" />
            <ValidationMessage For="() => _budget.Name" />
        </div>
        <div class="field">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="_budget.Description" />
            <ValidationMessage For="() => _budget.Description" />
        </div>
        <div class="field">
            <label for="start-date">Start Date</label>
            <InputDate id="start-date" @bind-Value="_budget.StartDate" />
            <ValidationMessage For="() => _budget.StartDate" />
        </div>
        <div class="field">
            <label for="end-date">End Date</label>
            <InputDate id="end-date" @bind-Value="_budget.EndDate" />
            <ValidationMessage For="() => _budget.EndDate" />
        </div>
        <div class="field checkbox">
            <InputCheckbox id="is-hidden" @bind-Value="_budget.IsHidden" />
            <label for="is-hidden">Is Hidden?</label>
        </div>
        <div class="buttons">
            <button class="primary" type="submit">Save</button>
            <button class="light" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>

    @if (_budget.Amounts.Count == 0)
    {
        <h2>Add Budget Amounts</h2>
        <form>
            <fieldset>
                <legend>Default Period</legend>
                <InputRadioGroup @bind-Value="_defaultPeriod">
                    <label>
                        <InputRadio Value="DefaultPeriod.Monthly" />
                        &nbsp;Monthly
                    </label>
                    <label>
                        <InputRadio Value="DefaultPeriod.Annual" />
                        &nbsp;Annual
                    </label>
                </InputRadioGroup>
            </fieldset>
            <fieldset>
                <legend>Use Data From</legend>
                <div class="field">
                    <label for="amount-start-date">Start Date</label>
                    <InputDate id="amount-start-date" @bind-Value="_amountStartDate" />
                </div>
                <div class="field">
                    <label for="amount-end-date">End Date</label>
                    <InputDate id="amount-end-date" @bind-Value="_amountEndDate" />
                </div>
            </fieldset>
            <div class="buttons">
                <button class="primary" @onclick="AddBudgetAmounts">Add Budget Amounts</button>
            </div>
        </form>
    }
    else
    {
        <p><a href="/budget/amounts/@_budget.Id">Manage Budget Amounts</a></p>
    }
}
@code {
    [Parameter]
    public Guid budgetId { get; set; }

    protected Budget? _budget;

    protected DateOnly _amountStartDate = DateOnly.MinValue;
    protected DateOnly _amountEndDate = DateOnly.MaxValue;

    protected enum DefaultPeriod { Monthly, Annual };
    protected DefaultPeriod _defaultPeriod = DefaultPeriod.Monthly;

    protected override async Task OnInitializedAsync()
    {
        if (budgetId == Guid.Empty)
        {
            var today = DateOnly.FromDateTime(DateTime.Today);
            var nextYear = today.Year + 1;
            _budget = new Budget()
                {
                    Id = Guid.Empty,
                    StartDate = new DateOnly(nextYear, 1, 1),
                    EndDate = new DateOnly(nextYear, 12, 31),
                };
        }
        else
        {
            _budget = await BudgetService.GetBudgetAsync(budgetId);
        }
    }

    protected string Action
    {
        get
        {
            return budgetId == Guid.Empty ? "Add" : "Edit";
        }
    }

    protected void AddBudgetAmounts()
    {

    }

    protected async Task SaveBudget()
    {
        if (_budget is not object) return;
        await BudgetService.Save(_budget);
        Cancel();
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/budgets");
    }
}
