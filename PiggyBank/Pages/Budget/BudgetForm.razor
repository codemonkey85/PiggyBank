@page "/budget/add"
@page "/budget/edit/{budgetId:guid}"
@inject AccountService AccountService
@inject BudgetService BudgetService
@inject NavigationManager NavigationManager

<h1>@Action Budget</h1>

@if (_budget is object)
{
    <EditForm Model="@_budget" OnValidSubmit="SaveBudget">
        <DataAnnotationsValidator />
        <div class="field">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="_budget.Name" />
            <ValidationMessage For="() => _budget.Name" />
        </div>
        <div class="field">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="_budget.Description" />
            <ValidationMessage For="() => _budget.Description" />
        </div>
        <div class="field">
            <label for="start-date">Start Date</label>
            <InputDate id="start-date" @bind-Value="_budget.StartDate" />
            <ValidationMessage For="() => _budget.StartDate" />
        </div>
        <div class="field">
            <label for="end-date">End Date</label>
            <InputDate id="end-date" @bind-Value="_budget.EndDate" />
            <ValidationMessage For="() => _budget.EndDate" />
        </div>
        <div class="field checkbox">
            <InputCheckbox id="is-hidden" @bind-Value="_budget.IsHidden" />
            <label for="is-hidden">Is Hidden?</label>
        </div>
        <div class="buttons">
            <button class="primary" type="submit">Save</button>
            <button class="light" @onclick="Cancel">Cancel</button>
        </div>
    </EditForm>


    @if (_addingAmounts)
    {
        <p>Adding amounts.</p>
    }
    else if (_budget.Amounts.Count == 0)
    {
        <h2>Add Budget Amounts</h2>
        <form>
            <fieldset>
                <legend>Default Period</legend>
                <InputRadioGroup @bind-Value="_defaultPeriod">
                    <label>
                        <InputRadio Value="BudgetAmount.AmountType.Monthly" />
                        Monthly
                    </label>
                    <label>
                        <InputRadio Value="BudgetAmount.AmountType.Annual" disabled="true" />
                        Annual
                    </label>
                </InputRadioGroup>
            </fieldset>
            <fieldset>
                <legend>Use Data From</legend>
                <div class="field">
                    <label for="amount-start-date">Start Date</label>
                    <InputDate id="amount-start-date" @bind-Value="_amountStartDate" />
                </div>
                <div class="field">
                    <label for="amount-end-date">End Date</label>
                    <InputDate id="amount-end-date" @bind-Value="_amountEndDate" />
                </div>
            </fieldset>
            <fieldset>
                <legend>Account Types to Include</legend>
                <label>
                    <InputCheckbox @bind-Value="_includeAsset" />
                    Asset
                </label>
                <label>
                    <InputCheckbox @bind-Value="_includeExpense" />
                    Expense
                </label>
                <label>
                    <InputCheckbox @bind-Value="_includeIncome" />
                    Income
                </label>
                <label>
                    <InputCheckbox @bind-Value="_includeLiability" />
                    Liability
                </label>
            </fieldset>
            <div class="buttons">
                <button class="primary" @onclick="AddBudgetAmounts">Add Budget Amounts</button>
            </div>
        </form>
    }
    else
    {
        <p><a href="/budget/amounts/@_budget.Id">Manage Budget Amounts</a></p>
    }
}
@code {
    [Parameter]
    public Guid budgetId { get; set; }

    protected Budget? _budget;

    protected bool _addingAmounts = false;
    protected BudgetAmount.AmountType _defaultPeriod = BudgetAmount.AmountType.Monthly;

    protected DateOnly _amountStartDate = DateOnly.MinValue;
    protected DateOnly _amountEndDate = DateOnly.MaxValue;

    protected bool _includeAsset = false;
    protected bool _includeExpense = true;
    protected bool _includeIncome = true;
    protected bool _includeLiability = false;

    protected override async Task OnInitializedAsync()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        _amountStartDate = new DateOnly(today.Year - 1, 1, 1);
        _amountEndDate = new DateOnly(today.Year, 12, 31);

        if (budgetId == Guid.Empty)
        {
            var nextYear = today.Year + 1;
            _budget = new Budget()
                {
                    Id = Guid.Empty,
                    StartDate = new DateOnly(nextYear, 1, 1),
                    EndDate = new DateOnly(nextYear, 12, 31),
                };
        }
        else
        {
            _budget = await BudgetService.GetBudgetAsync(budgetId);
        }
    }

    protected string Action
    {
        get
        {
            return budgetId == Guid.Empty ? "Add" : "Edit";
        }
    }

    protected async Task AddBudgetAmounts()
    {
        if (_budget is not object) return;
        if (_addingAmounts) return;
        _addingAmounts = true;

        var config = GetAmountConfig();
        await BudgetService.CalculateAmounts(_budget, config, AccountService);

        _addingAmounts = false;
    }

    private BudgetAmount.Configuration GetAmountConfig()
    {
        var config = new BudgetAmount.Configuration
            {
                DefaultPeriod = _defaultPeriod,
                StartDate = _amountStartDate,
                EndDate = _amountEndDate
            };

        if (_includeAsset)
        {
            config.AccountTypes.Add(Account.AccountType.Asset);
        }

        if (_includeExpense)
        {
            config.AccountTypes.Add(Account.AccountType.Expense);
        }

        if (_includeIncome)
        {
            config.AccountTypes.Add(Account.AccountType.Income);
        }

        if (_includeLiability)
        {
            config.AccountTypes.Add(Account.AccountType.Liability);
        }

        return config;
    }

    protected async Task SaveBudget()
    {
        if (_budget is not object) return;
        await BudgetService.Save(_budget);
        Cancel();
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("/budgets");
    }
}
