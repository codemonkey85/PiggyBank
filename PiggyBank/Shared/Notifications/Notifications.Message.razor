@*

Inspired by https://github.com/radzenhq/radzen-blazor/blob/master/Radzen.Blazor/RadzenNotificationMessage.razor

*@

@inject NotificationService NotificationService

@if (Message is object)
{
    <div aria-live="polite" class="message @(MessageClass())">
        <span class="icon @(IconClass())"></span>
        <span class="sr-only">@(Message.Severity)</span>
        <span class="text">@Message.Message</span>
        <button class="close-button" @onclick="Close">
            <span class="icon-close"></span>
            <span class="sr-only">Close</span>
        </button>
    </div>
}

@code {
    [Parameter]
    public NotificationMessage? Message { get; set; }

    public void Close()
    {
        if (Message is object)
        {
            NotificationService.Messages.Remove(Message);
            Message = null;
        }
    }

    private Dictionary<NotificationSeverity, string> IconClasses = new Dictionary<NotificationSeverity, string>()
    {
        { NotificationSeverity.Error, "icon-sad-face" },
        { NotificationSeverity.Info, "icon-speech" },
        { NotificationSeverity.Success, "icon-glasses-face" },
        { NotificationSeverity.Warning, "icon-shock-face" }
    };

    private string IconClass()
    {
        return IconClasses[Message!.Severity];
    }

    private string MessageClass()
    {
        return Message!.Severity.ToString().ToLower();
    }
}
